"use client";

import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function Agents() {
  const [requirements, setRequirements] = useState("");
  const [file, setFile] = useState<File | null>(null);
  const [maxIterations, setMaxIterations] = useState(3);
  const [isLoading, setIsLoading] = useState(false);
  const [response, setResponse] = useState<any>(null);
  const [error, setError] = useState("");
  const router = useRouter();

  // Project context fields
  const [projectTitle, setProjectTitle] = useState("");
  const [industry, setIndustry] = useState("");
  const [teamSize, setTeamSize] = useState<number | "">("");
  const [budget, setBudget] = useState<number | "">("");
  const [timeline, setTimeline] = useState("");
  const [priority, setPriority] = useState("");
  const [techStack, setTechStack] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");
    setResponse(null);

    // Build project context JSON from form fields
    const projectContext: any = {};
    if (projectTitle) projectContext.title = projectTitle;
    if (industry) projectContext.industry = industry;
    if (teamSize !== "") projectContext.team_size = teamSize;
    if (budget !== "") projectContext.budget = budget;
    if (timeline) projectContext.timeline = timeline;
    if (priority) projectContext.priority = priority;
    if (techStack) projectContext.tech_stack = techStack.split(",").map((s: string) => s.trim());

    const formData = new FormData();
    if (requirements) formData.append("requirements", requirements);
    if (file) formData.append("files", file);
    if (Object.keys(projectContext).length > 0) {
      formData.append("project_context", JSON.stringify(projectContext));
    }
    formData.append("max_iterations", maxIterations.toString());

    try {
      const res = await fetch("http://localhost:8000/generate", {
        method: "POST",
        body: formData,
      });

      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }

      const data = await res.json();

      // Check if data was successfully saved to Supabase
      if (data.success && data.supabase_storage?.success && data.project_id) {
        // Save project metadata to localStorage for the projects list
        const projectMetadata = {
          id: data.project_id,
          title: projectTitle || `Project ${data.project_id}`,
          createdAt: new Date().toISOString().split('T')[0], // YYYY-MM-DD format
          status: 'active' as const,
          userStoriesCount: data.user_stories?.length || 0,
          tasksCount: data.tasks?.length || 0,
          description: projectTitle ? `Project: ${projectTitle}` : 'Generated by AI agents'
        };

        // Get existing projects and add the new one
        const existingProjects = JSON.parse(localStorage.getItem('projects-list') || '[]');
        const updatedProjects = [projectMetadata, ...existingProjects.filter((p: any) => p.id !== data.project_id)];
        localStorage.setItem('projects-list', JSON.stringify(updatedProjects));

        // Redirect to the project board
        router.push(`/board/${data.project_id}`);
        return; // Exit early to prevent setting response state
      }

      // If Supabase storage failed, show the response with error details
      setResponse(data);
    } catch (err: any) {
      setError(err.message || "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="font-sans grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20">
      <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start w-full max-w-4xl">
        <div className="text-center sm:text-left w-full">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">AI Agents - Generate User Stories</h1>
          <p className="text-lg text-gray-600 mb-8">
            Input your project requirements and let AI agents generate user stories and tasks.
          </p>
        </div>

        <form onSubmit={handleSubmit} className="w-full space-y-6">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* Project Title */}
            <div className="sm:col-span-2">
              <label htmlFor="projectTitle" className="block text-sm font-medium text-gray-700 mb-2">
                Project Title
              </label>
              <input
                type="text"
                id="projectTitle"
                value={projectTitle}
                onChange={(e) => setProjectTitle(e.target.value)}
                placeholder="Enter a descriptive title for your project"
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {/* Client Requirements */}
            <div className="sm:col-span-2">
              <label htmlFor="requirements" className="block text-sm font-medium text-gray-700 mb-2">
                Client Requirements
              </label>
              <textarea
                id="requirements"
                value={requirements}
                onChange={(e) => setRequirements(e.target.value)}
                placeholder="Describe your project requirements..."
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required={!file}
              />
            </div>

            {/* File Upload */}
            <div>
              <label htmlFor="file" className="block text-sm font-medium text-gray-700 mb-2">
                Project Documentation (PDF)
              </label>
              <input
                type="file"
                id="file"
                accept=".pdf"
                onChange={(e) => setFile(e.target.files?.[0] || null)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required={!requirements}
              />
            </div>

            {/* Max Iterations */}
            <div>
              <label htmlFor="maxIterations" className="block text-sm font-medium text-gray-700 mb-2">
                Max Iterations
              </label>
              <input
                type="number"
                id="maxIterations"
                value={maxIterations}
                onChange={(e) => setMaxIterations(Number(e.target.value))}
                min={1}
                max={10}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {/* Project Context */}
            <div className="sm:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-4">
                Project Context (Optional)
              </label>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="industry" className="block text-xs font-medium text-gray-600 mb-1">
                    Industry
                  </label>
                  <input
                    type="text"
                    id="industry"
                    value={industry}
                    onChange={(e) => setIndustry(e.target.value)}
                    placeholder="e.g., Technology, Healthcare"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  />
                </div>

                <div>
                  <label htmlFor="teamSize" className="block text-xs font-medium text-gray-600 mb-1">
                    Team Size
                  </label>
                  <input
                    type="number"
                    id="teamSize"
                    value={teamSize}
                    onChange={(e) => setTeamSize(e.target.value ? Number(e.target.value) : "")}
                    placeholder="e.g., 5"
                    min="1"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  />
                </div>

                <div>
                  <label htmlFor="budget" className="block text-xs font-medium text-gray-600 mb-1">
                    Budget ($)
                  </label>
                  <input
                    type="number"
                    id="budget"
                    value={budget}
                    onChange={(e) => setBudget(e.target.value ? Number(e.target.value) : "")}
                    placeholder="e.g., 50000"
                    min="0"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  />
                </div>

                <div>
                  <label htmlFor="timeline" className="block text-xs font-medium text-gray-600 mb-1">
                    Timeline
                  </label>
                  <input
                    type="text"
                    id="timeline"
                    value={timeline}
                    onChange={(e) => setTimeline(e.target.value)}
                    placeholder="e.g., 3 months, Q4 2025"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  />
                </div>

                <div>
                  <label htmlFor="priority" className="block text-xs font-medium text-gray-600 mb-1">
                    Priority
                  </label>
                  <select
                    id="priority"
                    value={priority}
                    onChange={(e) => setPriority(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  >
                    <option value="">Select priority</option>
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="critical">Critical</option>
                  </select>
                </div>

                <div>
                  <label htmlFor="tech stack" className="block text-xs font-medium text-gray-600 mb-1">
                    Tech Stack
                  </label>
                  <input
                    type="text"
                    id="tech stack"
                    value={techStack}
                    onChange={(e) => setTechStack(e.target.value)}
                    placeholder="e.g., React, Node.js, Express"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  />
                </div>
              </div>
              <p className="text-xs text-gray-500 mt-2">
                Fill in any relevant project details. These will help the AI generate more accurate user stories.
              </p>
              {(projectTitle || industry || teamSize || budget || timeline || priority || techStack) && (
                <details className="mt-3">
                  <summary className="text-xs text-gray-600 cursor-pointer hover:text-gray-800">
                    Preview JSON data that will be sent
                  </summary>
                  <pre className="mt-2 p-2 bg-gray-50 border border-gray-200 rounded text-xs overflow-x-auto">
                    {JSON.stringify(
                      Object.fromEntries(
                        Object.entries({
                          title: projectTitle || undefined,
                          industry: industry || undefined,
                          team_size: teamSize || undefined,
                          budget: budget || undefined,
                          timeline: timeline || undefined,
                          priority: priority || undefined,
                          tech_stack: techStack ? techStack.split(",").map((s: string) => s.trim()) : undefined,
                        }).filter(([_, v]) => v !== undefined)
                      ),
                      null,
                      2
                    )}
                  </pre>
                </details>
              )}
            </div>
          </div>

          <div className="flex gap-4 items-center flex-col sm:flex-row">
            <button
              type="submit"
              disabled={isLoading}
              className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-purple-600 text-white gap-2 hover:bg-purple-700 font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? "Generating..." : "Generate User Stories"}
            </button>
            <Link
              href="/menu"
              className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 w-full sm:w-auto"
            >
              Back to Menu
            </Link>
          </div>
        </form>

        {error && (
          <div className="w-full p-4 bg-red-100 border border-red-400 text-red-700 rounded-md">
            <strong>Error:</strong> {error}
          </div>
        )}

        {response && (
          <div className="w-full p-6 bg-green-100 border border-green-400 text-green-700 rounded-md">
            <h3 className="font-semibold mb-2">Generation Successful!</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm mb-4">
              <div>
                <p><strong>Project ID:</strong> {response.project_id}</p>
                <p><strong>User Stories:</strong> {response.user_stories?.length || 0}</p>
                <p><strong>Tasks:</strong> {response.tasks?.length || 0}</p>
                {response.supabase_storage && (
                  <p><strong>Supabase Storage:</strong> {response.supabase_storage.success ? "Success" : "Failed"}</p>
                )}
              </div>
              <div>
                <p><strong>Validation Score:</strong> {response.validation_score ? `${response.validation_score.toFixed(1)}/100` : "N/A"}</p>
                <p><strong>Iterations:</strong> {response.iterations || "N/A"}</p>
                <p><strong>Status:</strong> {response.status || "N/A"}</p>
                {response.source_info && (
                  <p><strong>Source:</strong> {response.source_info.multimodal ? "Text + PDF" : (response.source_info.pdf_provided ? "PDF only" : "Text only")}</p>
                )}
              </div>
            </div>
            <div className="flex gap-2 flex-wrap">
              <Link
                href={`/board/${response.project_id}`}
                className="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors"
              >
                View Project Board
              </Link>
              <Link
                href="/projects"
                className="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 transition-colors"
              >
                View All Projects
              </Link>
              <Link
                href="/requirements"
                className="inline-flex items-center px-4 py-2 bg-gray-600 text-white text-sm font-medium rounded-md hover:bg-gray-700 transition-colors"
              >
                Generate Another Project
              </Link>
            </div>
          </div>
        )}
      </main>
      <footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center">
        <div className="text-sm text-gray-500">
          Built with Next.js, TypeScript, and Tailwind CSS
        </div>
      </footer>
    </div>
  );
}